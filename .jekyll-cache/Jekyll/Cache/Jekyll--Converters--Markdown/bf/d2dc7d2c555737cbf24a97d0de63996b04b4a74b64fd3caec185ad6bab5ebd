I"AO<p><em>This post is a summary of the code I wrote in Python for my then-desperate wife to automatically generate hundreds of invoices.</em></p>

<p>Suppose you have an excel sheet with hundreds of rows and a couple of columns (a sample is shown below), and would like to generate pdf reports for individual rows according to column values. 
With MS office, the sheet can be imported into a word template and the column names of interest can be placed accordingly in the template. 
Then you can print pdf files for every row. However the task can easily become tedious when you have additional requirements. 
For instance, grouping customers by attributes like regions to different folders and naming the printed files with column values would need manual and repetitive efforts. 
To automate the process with Python, there are many <a href="https://www.xlwings.org/blog/reporting-with-python">options</a> to choose from.
The major tool we’ll make use of is <a href="https://jinja2docs.readthedocs.io/en/stable/">Jinja2</a>. 
In addition, we use pandas to handle tables and test a couple of html-to-pdf tools.</p>

<h2 id="what-is-jinja2">What is Jinja2?</h2>

<p>This is excerpted from Jinja2’s documentation:</p>
<blockquote>
  <p>Jinja2 is a modern and designer-friendly templating language for Python, modelled after Django’s templates. It is fast, widely used and secure with the optional sandboxed template execution environment.</p>
</blockquote>

<blockquote>
  <p>The name Jinja was chosen because it’s the name of a Japanese temple and temple and template share a similar pronunciation. It is not named after the city in Uganda.</p>
</blockquote>

<p>In a nutshell, Jinja bridges our Python code and html files which will be shown to end users. 
By placing placeholders `` in a html template, in Python, Jinja can pass actual values to the placeholders when rendering html files. 
If this sounds too abstract, the concept will become clear when we see the code later.</p>

<h2 id="a-concrete-but-simple-example">A concrete but simple example</h2>

<p>Let’s generate invoices according to the following sales table:</p>

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Invoice</th>
      <th>Name</th>
      <th>Address</th>
      <th>Item</th>
      <th>Cost</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>A0001</td>
      <td>Alix</td>
      <td>Volkstr. 1</td>
      <td>book</td>
      <td>12Euro</td>
    </tr>
    <tr>
      <td>2</td>
      <td>A0002</td>
      <td>Juli</td>
      <td>Volkstr. 2</td>
      <td>laptop</td>
      <td>500Euro</td>
    </tr>
    <tr>
      <td>3</td>
      <td>A0628</td>
      <td>Ruo</td>
      <td>Volkstr. 3</td>
      <td>laptop</td>
      <td>1245Euro</td>
    </tr>
  </tbody>
</table>

<p>Each customer needs an invoice pdf file which is named by the customer’s name. 
Our basic idea is to first generate html files and then convert them to pdf files.</p>

<p>To start with, I have already composed a <a href="https://github.com/Linlinzhao/jinja-report/blob/main/layout.html">template html</a> file based on this <a href="https://github.com/mjhea0/thinkful-mentor/tree/master/python/jinja">repo</a>. 
This is how the template looks like:</p>

<p><img src="/assets/images/jinja_template.png" alt="template" /></p>

<p>As you may see from the template, the column names in our table have corresponding placeholders.</p>

<h2 id="use-jinja-to-render-html-files">Use Jinja to render html files</h2>

<p>Now we can write Python code to pass the values in the table to html files. The following function can render one html file for a given row.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jinja2</span>

<span class="k">def</span> <span class="nf">render_html</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
    <span class="s">"""
    Render html page using jinja
    """</span>
    <span class="n">template_loader</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">FileSystemLoader</span><span class="p">(</span><span class="n">searchpath</span><span class="o">=</span><span class="s">"./"</span><span class="p">)</span>
    <span class="n">template_env</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">Environment</span><span class="p">(</span><span class="n">loader</span><span class="o">=</span><span class="n">template_loader</span><span class="p">)</span>
    <span class="n">template_file</span> <span class="o">=</span> <span class="s">"layout.html"</span>
    <span class="n">template</span> <span class="o">=</span> <span class="n">template_env</span><span class="p">.</span><span class="n">get_template</span><span class="p">(</span><span class="n">template_file</span><span class="p">)</span>
    <span class="n">output_text</span> <span class="o">=</span> <span class="n">template</span><span class="p">.</span><span class="n">render</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
        <span class="n">address</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Address</span><span class="p">,</span>
        <span class="n">date</span><span class="o">=</span><span class="n">get_date</span><span class="p">(),</span>
        <span class="n">invoice</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Invoice</span><span class="p">,</span>
        <span class="n">item</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Item</span><span class="p">,</span>
        <span class="n">amount</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Cost</span>
        <span class="p">)</span>

    <span class="n">html_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">row</span><span class="p">.</span><span class="n">Name</span><span class="si">}</span><span class="s">.html'</span>
    <span class="n">html_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
    <span class="n">html_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">output_text</span><span class="p">)</span>
    <span class="n">html_file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>What this code does:</p>
<ol>
  <li>tell Jinja where the template is;</li>
  <li>pass values to the placeholder in the template when rendering;</li>
  <li>write the rendered output to a html file.</li>
</ol>

<h2 id="read-the-table-using-pandas">Read the table using Pandas</h2>

<p>The table is stored as <code class="language-plaintext highlighter-rouge">sample.csv</code>, we can use pandas to iterate through every row to have named tuples which can then be passed to <code class="language-plaintext highlighter-rouge">render_html</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'sample.csv'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">itertuples</span><span class="p">():</span>
    <span class="n">render_html</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div></div>
<p>and three html files will be generated.</p>

<p><img src="/assets/images/jiaja_out_html.png" alt="htmls" />.</p>

<p>To check if the values are passed correctly, let’s view the <code class="language-plaintext highlighter-rouge">ruo.html</code>:</p>

<p><img src="/assets/images/jiaja_ruo.png" alt="ruo" /></p>

<p>The output actually looks all right, which is great.</p>

<h2 id="convert-html-to-pdf">Convert html to pdf</h2>

<p>In python, there are also several options for converting html to pdf, <a href="https://github.com/JazzCore/python-pdfkit">pdfkit</a>, <a href="https://weasyprint.org/">weasyprint</a>, <a href="https://xhtml2pdf.readthedocs.io/en/latest/">xhtml2pdf</a>, to name but a few.</p>

<p>Several factors like the template css style and the browser for viewing the html files can make the pdfs  look quite differently from what you see from the browser. 
For instance, since the template html above has English, German and Chinese, we may need to specify encoding schemes for rendering all characters correctly. 
After playing different tools for a while, I have chosen <a href="https://github.com/JazzCore/python-pdfkit"><code class="language-plaintext highlighter-rouge">pdfkit</code></a>, which is a python wrapper for <code class="language-plaintext highlighter-rouge">wkhtmltopdf</code>. 
An exhaustive list of configurations can be found <a href="https://wkhtmltopdf.org/usage/wkhtmltopdf.txt">here</a>.</p>

<p>Again I have written a function for converting:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">html2pdf</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="n">pdf_path</span><span class="p">):</span>
    <span class="s">"""
    Convert html to pdf using pdfkit which is a wrapper of wkhtmltopdf
    """</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'page-size'</span><span class="p">:</span> <span class="s">'Letter'</span><span class="p">,</span>
        <span class="s">'margin-top'</span><span class="p">:</span> <span class="s">'0.35in'</span><span class="p">,</span>
        <span class="s">'margin-right'</span><span class="p">:</span> <span class="s">'0.75in'</span><span class="p">,</span>
        <span class="s">'margin-bottom'</span><span class="p">:</span> <span class="s">'0.75in'</span><span class="p">,</span>
        <span class="s">'margin-left'</span><span class="p">:</span> <span class="s">'0.75in'</span><span class="p">,</span>
        <span class="s">'encoding'</span><span class="p">:</span> <span class="s">"UTF-8"</span><span class="p">,</span>
        <span class="s">'no-outline'</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
        <span class="s">'enable-local-file-access'</span><span class="p">:</span> <span class="bp">None</span>
    <span class="p">}</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">html_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pdfkit</span><span class="p">.</span><span class="n">from_file</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">pdf_path</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="n">options</span>
</code></pre></div></div>
<p>Note that the specified options are from the <code class="language-plaintext highlighter-rouge">wkhtmltopdf</code> configuration list. For entries without values, simply specify them to be <code class="language-plaintext highlighter-rouge">None</code>.</p>

<h2 id="put-them-all-together">Put them all together</h2>

<p>To have clean working folder, directories <code class="language-plaintext highlighter-rouge">res</code> and <code class="language-plaintext highlighter-rouge">tables</code> are created for saving generated files and the original table respectively.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">jinja2</span>
<span class="kn">import</span> <span class="nn">pdfkit</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span>

<span class="k">def</span> <span class="nf">render_html</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
    <span class="s">"""
    Render html page using jinja based on layout.html
    """</span>
    <span class="n">template_loader</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">FileSystemLoader</span><span class="p">(</span><span class="n">searchpath</span><span class="o">=</span><span class="s">"./"</span><span class="p">)</span>
    <span class="n">template_env</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">Environment</span><span class="p">(</span><span class="n">loader</span><span class="o">=</span><span class="n">template_loader</span><span class="p">)</span>
    <span class="n">template_file</span> <span class="o">=</span> <span class="s">"layout.html"</span>
    <span class="n">template</span> <span class="o">=</span> <span class="n">template_env</span><span class="p">.</span><span class="n">get_template</span><span class="p">(</span><span class="n">template_file</span><span class="p">)</span>
    <span class="n">output_text</span> <span class="o">=</span> <span class="n">template</span><span class="p">.</span><span class="n">render</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
        <span class="n">address</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Address</span><span class="p">,</span>
        <span class="n">date</span><span class="o">=</span><span class="n">get_date</span><span class="p">(),</span>
        <span class="n">invoice</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Invoice</span><span class="p">,</span>
        <span class="n">item</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Item</span><span class="p">,</span>
        <span class="n">amount</span><span class="o">=</span><span class="n">row</span><span class="p">.</span><span class="n">Cost</span>
        <span class="p">)</span>

    <span class="n">html_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./res/</span><span class="si">{</span><span class="n">row</span><span class="p">.</span><span class="n">Name</span><span class="si">}</span><span class="s">.html'</span>
    <span class="n">html_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
    <span class="n">html_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">output_text</span><span class="p">)</span>
    <span class="n">html_file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Now converting </span><span class="si">{</span><span class="n">row</span><span class="p">.</span><span class="n">Name</span><span class="si">}</span><span class="s"> ... "</span><span class="p">)</span>
    <span class="n">pdf_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./res/</span><span class="si">{</span><span class="n">row</span><span class="p">.</span><span class="n">Name</span><span class="si">}</span><span class="s">.pdf'</span>    
    <span class="n">html2pdf</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="n">pdf_path</span><span class="p">)</span>   

<span class="k">def</span> <span class="nf">html2pdf</span><span class="p">(</span><span class="n">html_path</span><span class="p">,</span> <span class="n">pdf_path</span><span class="p">):</span>
    <span class="s">"""
    Convert html to pdf using pdfkit which is a wrapper of wkhtmltopdf
    """</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'page-size'</span><span class="p">:</span> <span class="s">'Letter'</span><span class="p">,</span>
        <span class="s">'margin-top'</span><span class="p">:</span> <span class="s">'0.35in'</span><span class="p">,</span>
        <span class="s">'margin-right'</span><span class="p">:</span> <span class="s">'0.75in'</span><span class="p">,</span>
        <span class="s">'margin-bottom'</span><span class="p">:</span> <span class="s">'0.75in'</span><span class="p">,</span>
        <span class="s">'margin-left'</span><span class="p">:</span> <span class="s">'0.75in'</span><span class="p">,</span>
        <span class="s">'encoding'</span><span class="p">:</span> <span class="s">"UTF-8"</span><span class="p">,</span>
        <span class="s">'no-outline'</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
        <span class="s">'enable-local-file-access'</span><span class="p">:</span> <span class="bp">None</span>
    <span class="p">}</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">html_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pdfkit</span><span class="p">.</span><span class="n">from_file</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">pdf_path</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="n">options</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_date</span><span class="p">():</span>
    <span class="s">"Get today's date in German format"</span>
    <span class="n">today</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%d.%m.%Y"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>

    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'tables/sample.csv'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">itertuples</span><span class="p">():</span>
        <span class="n">render_html</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div></div>
<p>Running the script would generate both html files and pdf files for all rows. The code is also available on <a href="https://github.com/Linlinzhao/jinja-report">github</a>.</p>

<h3 id="code-dependencies">Code dependencies</h3>

<p>System wide: <code class="language-plaintext highlighter-rouge">wkhtmltopdf</code>, installers for different OS can be found <a href="https://wkhtmltopdf.org/downloads.html">here</a>.</p>

<p>Python3:</p>
<ul>
  <li>pdfkit</li>
  <li>jinja2</li>
  <li>pandas</li>
</ul>
:ET